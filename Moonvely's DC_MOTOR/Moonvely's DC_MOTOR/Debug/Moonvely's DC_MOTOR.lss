
Moonvely's DC_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000882  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d7  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000089  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e d0       	rcall	.+28     	; 0xc6 <main>
  aa:	41 c0       	rjmp	.+130    	; 0x12e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <DC_Motor>:
#define F_CPU 16000000UL
#include <util/delay.h>
volatile char speed=0;
void DC_Motor(int speed)
{
	if(speed< 0) speed= 0;
  ae:	99 23       	and	r25, r25
  b0:	14 f4       	brge	.+4      	; 0xb6 <DC_Motor+0x8>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
	if(speed>100) speed=100;
  b6:	85 36       	cpi	r24, 0x65	; 101
  b8:	91 05       	cpc	r25, r1
  ba:	14 f0       	brlt	.+4      	; 0xc0 <DC_Motor+0x12>
  bc:	84 e6       	ldi	r24, 0x64	; 100
  be:	90 e0       	ldi	r25, 0x00	; 0
	OCR1A=speed;
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
  c4:	08 95       	ret

000000c6 <main>:
}

int main(void)
{
	int i;
	DDRA=0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
  ca:	11 ba       	out	0x11, r1	; 17
	DDRB=0x60;
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x82;
  d0:	82 e8       	ldi	r24, 0x82	; 130
  d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1A;
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	8e bd       	out	0x2e, r24	; 46
	OCR1A=0;
  d8:	1b bc       	out	0x2b, r1	; 43
  da:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
  dc:	19 bc       	out	0x29, r1	; 41
  de:	18 bc       	out	0x28, r1	; 40
	ICR1=100;
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	97 bd       	out	0x27, r25	; 39
  e6:	86 bd       	out	0x26, r24	; 38
	while(1)
	{
		if(PIND == 0x01)
  e8:	80 b3       	in	r24, 0x10	; 16
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	29 f4       	brne	.+10     	; 0xf8 <main+0x32>
		{
			PORTA=0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8b bb       	out	0x1b, r24	; 27
			i = 100;
  f2:	c4 e6       	ldi	r28, 0x64	; 100
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	18 c0       	rjmp	.+48     	; 0x128 <main+0x62>
		}
		else if(PIND == 0x02)
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	49 f4       	brne	.+18     	; 0x110 <main+0x4a>
		{
			PORTA=0x0F;
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	8b bb       	out	0x1b, r24	; 27
			if(i == 100)
 102:	c4 36       	cpi	r28, 0x64	; 100
 104:	d1 05       	cpc	r29, r1
 106:	59 f0       	breq	.+22     	; 0x11e <main+0x58>
			{
				i = 0;
			}
			else if(i == 0){
 108:	20 97       	sbiw	r28, 0x00	; 0
 10a:	61 f0       	breq	.+24     	; 0x124 <main+0x5e>
				i = 70;
			}
			else {
				i += 10;
 10c:	2a 96       	adiw	r28, 0x0a	; 10
 10e:	0c c0       	rjmp	.+24     	; 0x128 <main+0x62>
			}
		}
		else if(PIND == 0x04)
 110:	80 b3       	in	r24, 0x10	; 16
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	49 f4       	brne	.+18     	; 0x128 <main+0x62>
		{
			PORTA=0x00;
 116:	1b ba       	out	0x1b, r1	; 27
			i = 0;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	05 c0       	rjmp	.+10     	; 0x128 <main+0x62>
		else if(PIND == 0x02)
		{
			PORTA=0x0F;
			if(i == 100)
			{
				i = 0;
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x62>
			}
			else if(i == 0){
				i = 70;
 124:	c6 e4       	ldi	r28, 0x46	; 70
 126:	d0 e0       	ldi	r29, 0x00	; 0
		else if(PIND == 0x04)
		{
			PORTA=0x00;
			i = 0;
		}
		DC_Motor(i);
 128:	ce 01       	movw	r24, r28
 12a:	c1 df       	rcall	.-126    	; 0xae <DC_Motor>
			DC_Motor(i); _delay_ms(100);
		}
		for(i=100;i>=0;i--){
			DC_Motor(i); _delay_ms(100);
		}*/
	}
 12c:	dd cf       	rjmp	.-70     	; 0xe8 <main+0x22>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
