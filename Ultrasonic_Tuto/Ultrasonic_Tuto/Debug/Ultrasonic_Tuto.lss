
Ultrasonic_Tuto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000808  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000058  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	86 c0       	rjmp	.+268    	; 0x1a8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	unsigned int distance;
	unsigned int i;
	DDRB = 0x10;
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	87 bb       	out	0x17, r24	; 23
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
  a2:	82 b1       	in	r24, 0x02	; 2
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;
  ae:	82 bb       	out	0x12, r24	; 18
	
	while(1)
	{
		
		TCCR1B = 0x03;
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	8e bd       	out	0x2e, r24	; 46
		PORTE &= ~(1<<TRIG);
  b4:	83 b1       	in	r24, 0x03	; 3
  b6:	8f 7b       	andi	r24, 0xBF	; 191
  b8:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x1e>
  c0:	00 00       	nop
		_delay_us(10);
		PORTE |= (1<<TRIG);
  c2:	83 b1       	in	r24, 0x03	; 3
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	83 b9       	out	0x03, r24	; 3
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x2c>
  ce:	00 00       	nop
		_delay_us(10);
		PORTE &= ~(1<<TRIG);
  d0:	83 b1       	in	r24, 0x03	; 3
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	83 b9       	out	0x03, r24	; 3
		while(!(PINE & (1<<ECHO)));
  d6:	0f 9b       	sbis	0x01, 7	; 1
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x38>
		TCNT1 = 0x0000;
  da:	1d bc       	out	0x2d, r1	; 45
  dc:	1c bc       	out	0x2c, r1	; 44
		while(PINE & (1<<ECHO));
  de:	0f 99       	sbic	0x01, 7	; 1
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x40>
		TCCR1B = 0x00;
  e2:	1e bc       	out	0x2e, r1	; 46
		distance = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 4 / 2) / 1000);
  e4:	2c b5       	in	r18, 0x2c	; 44
  e6:	3d b5       	in	r19, 0x2d	; 45
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	a4 e5       	ldi	r26, 0x54	; 84
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	48 d0       	rcall	.+144    	; 0x18a <__umulhisi3>
  fa:	28 ee       	ldi	r18, 0xE8	; 232
  fc:	33 e0       	ldi	r19, 0x03	; 3
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	21 d0       	rcall	.+66     	; 0x146 <__udivmodsi4>
			_delay_ms(300);
		}
		else;
		*/
		
		if(distance < 50)
 104:	22 33       	cpi	r18, 0x32	; 50
 106:	31 05       	cpc	r19, r1
 108:	18 f4       	brcc	.+6      	; 0x110 <main+0x72>
		{
			PORTD = 0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	82 bb       	out	0x12, r24	; 18
 10e:	d0 cf       	rjmp	.-96     	; 0xb0 <main+0x12>
		}
		else if(distance < 100)
 110:	24 36       	cpi	r18, 0x64	; 100
 112:	31 05       	cpc	r19, r1
 114:	18 f4       	brcc	.+6      	; 0x11c <main+0x7e>
		{
			PORTD = 0x02;
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	82 bb       	out	0x12, r24	; 18
 11a:	ca cf       	rjmp	.-108    	; 0xb0 <main+0x12>
		}
		else if(distance < 150)
 11c:	26 39       	cpi	r18, 0x96	; 150
 11e:	31 05       	cpc	r19, r1
 120:	18 f4       	brcc	.+6      	; 0x128 <main+0x8a>
		{
			PORTD = 0x04;
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	82 bb       	out	0x12, r24	; 18
 126:	c4 cf       	rjmp	.-120    	; 0xb0 <main+0x12>
		}
		else if(distance < 200)
 128:	28 3c       	cpi	r18, 0xC8	; 200
 12a:	31 05       	cpc	r19, r1
 12c:	18 f4       	brcc	.+6      	; 0x134 <main+0x96>
		{
			PORTD = 0x08;
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	82 bb       	out	0x12, r24	; 18
 132:	be cf       	rjmp	.-132    	; 0xb0 <main+0x12>
		}
		else if(distance < 250)
 134:	2a 3f       	cpi	r18, 0xFA	; 250
 136:	31 05       	cpc	r19, r1
 138:	18 f4       	brcc	.+6      	; 0x140 <main+0xa2>
		{
			PORTD = 0x10;
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	82 bb       	out	0x12, r24	; 18
 13e:	b8 cf       	rjmp	.-144    	; 0xb0 <main+0x12>
		}
		else
		{
			PORTD = 0x20;
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	82 bb       	out	0x12, r24	; 18
 144:	b5 cf       	rjmp	.-150    	; 0xb0 <main+0x12>

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <__umulhisi3>:
 18a:	a2 9f       	mul	r26, r18
 18c:	b0 01       	movw	r22, r0
 18e:	b3 9f       	mul	r27, r19
 190:	c0 01       	movw	r24, r0
 192:	a3 9f       	mul	r26, r19
 194:	70 0d       	add	r23, r0
 196:	81 1d       	adc	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	91 1d       	adc	r25, r1
 19c:	b2 9f       	mul	r27, r18
 19e:	70 0d       	add	r23, r0
 1a0:	81 1d       	adc	r24, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	91 1d       	adc	r25, r1
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
